/* tslint:disable */
/* eslint-disable */
/**
 * Nunu Example API
 * This is a sample server celler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponse
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponse {
    /**
     * 
     * @type {number}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponse
     */
    'code'?: number;
    /**
     * 
     * @type {GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponseData}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponse
     */
    'data'?: GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponseData;
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponseData
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponseData {
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponseData
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponseData
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponse
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponse {
    /**
     * 
     * @type {number}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponse
     */
    'code'?: number;
    /**
     * 
     * @type {GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponseData}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponse
     */
    'data'?: GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponseData;
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponseData
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponseData {
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponseData
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1Response
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1Response {
    /**
     * 
     * @type {number}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1Response
     */
    'code'?: number;
    /**
     * 
     * @type {object}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1Response
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest
 */
export interface GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest
     */
    'nickname'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 账号登录
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (request: GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('loginPost', 'request', request)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 目前只支持邮箱登录
         * @summary 用户注册
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (request: GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('registerPost', 'request', request)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut: async (request: GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('userPut', 'request', request)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 账号登录
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(request: GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 目前只支持邮箱登录
         * @summary 用户注册
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(request: GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPut(request: GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPut(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 账号登录
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(request: GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1LoginResponse> {
            return localVarFp.loginPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 目前只支持邮箱登录
         * @summary 用户注册
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(request: GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1Response> {
            return localVarFp.registerPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: RawAxiosRequestConfig): AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1GetProfileResponse> {
            return localVarFp.userGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest} request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(request: GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<GithubComGoNunuNunuLayoutAdvancedApiV1Response> {
            return localVarFp.userPut(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 账号登录
     * @param {GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest} request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginPost(request: GithubComGoNunuNunuLayoutAdvancedApiV1LoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 目前只支持邮箱登录
     * @summary 用户注册
     * @param {GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest} request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerPost(request: GithubComGoNunuNunuLayoutAdvancedApiV1RegisterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改用户信息
     * @param {GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest} request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userPut(request: GithubComGoNunuNunuLayoutAdvancedApiV1UpdateProfileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userPut(request, options).then((request) => request(this.axios, this.basePath));
    }
}



